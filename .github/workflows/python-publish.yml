# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    tags:
      - '*'
    branches:
      - main

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ubuntu-20.04, macos-11]
       


    steps:
      - uses: actions/checkout@v4

 
      - name: GitHub Tag Name example
        run: |
         echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
         echo "Tag name from github.ref_name: ${{  github.ref_name }}"
          
      - uses: robinraju/release-downloader@v1.9
        with:
          repository: "fixstars/ion-kit"
          latest: true
          fileName: "ion-kit*"
      - name: check
        run: |
          ls

      - name: Copy macos file
        if: runner.os == 'macOS'
        run: |
          mkdir $GITHUB_WORKSPACE/macos
          tar xzf  ion-kit-*macos.tar.gz  -C $GITHUB_WORKSPACE/macos --strip-components 1
          cp  $GITHUB_WORKSPACE/macos/lib/libHalide.16.0.0.dylib python/ionpy/module/macos/libHalide.16.dylib
          cp  $GITHUB_WORKSPACE/macos/lib/libion-core.dylib python/ionpy/module/macos/libion-core.dylib
          cp  $GITHUB_WORKSPACE/macos/lib/libion-bb.dylib python/ionpy/module/macos/libion-bb.dylib
          ls python/ionpy/module/macos

      - name: Copy linux file
        if: runner.os == 'Linux'
        run: |
          mkdir $GITHUB_WORKSPACE/linux
          tar xzf  ion-kit-*linux.tar.gz  -C $GITHUB_WORKSPACE/linux --strip-components 1
          cp  $GITHUB_WORKSPACE/linux/lib/libion-bb.so python/ionpy/module/linux/libion-bb.so
          cp  $GITHUB_WORKSPACE/linux/lib/libion-core.so python/ionpy/module/linux/libion-core.so
          cp  $GITHUB_WORKSPACE/linux/lib/libHalide.so.16.0.0 python/ionpy/module/linux/libHalide.so.16
          ls python/ionpy/module/linux

      - name: Copy windows file
        if: runner.os == 'Windows'
        run: |
          mkdir windows
          unzip  ion-kit-*windows.zip  && mv ion-kit*/*  windows
          cp  windows/bin/Halide.dll python/ionpy/module/windows/Halide.dll
          cp  windows/bin/ion-core.dll python/ionpy/module/windows/ion-core.dll
          cp  windows/bin/ion-bb.dll python/ionpy/module/windows/ion-bb.dll
          ls  python/ionpy/module/windows

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.4

      - name: Build wheels
        run: |
          cd python && python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_MACOS: auto 
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
          CIBW_SKIP: "*-win32 *-manylinux_i686"
          CIBW_BUILD: cp39-*

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: python/wheelhouse/*.whl
      
      # - name: Test wheels
      #   if: runner.os == 'Linux'
      #   run: |
      #     ls python/wheelhouse/*.whl
      #     pip install python/wheelhouse/*x86_64.whl
      #     python -c "import ionpy"
      
          

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pip install build && cd python && python -m build --sdist


      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: python/dist/*.tar.gz
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Check dist
        run: ls dist
        
      # - uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository-url: https://test.pypi.org/legacy/
